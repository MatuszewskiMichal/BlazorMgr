#pragma checksum "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\Pages\Table.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f835b22f949f2bddfd5c38cab3c845742460713a"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MgrWebAssembly.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\_Imports.razor"
using MgrWebAssembly;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\_Imports.razor"
using MgrWebAssembly.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\_Imports.razor"
using MgrWebAssemblyLibrary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\_Imports.razor"
using Blazorise;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\Pages\Table.razor"
using CsvHelper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\Pages\Table.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\Pages\Table.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\Pages\Table.razor"
using MgrWebAssembly.Services;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/table")]
    public partial class Table : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 206 "C:\Users\Michal\source\repos\MgrWebAssembly\MgrWebAssembly\Pages\Table.razor"
       
    string baseUrl = "https://localhost:44347/";
    List<Customers> customers;
    bool ShowPopup = false;
    int currentPage = 1;
    int totalPages = 0;

    string FilterCompanyName = "";
    string FilterByCity = "";
    string FilterByCountry = "";

    Customers addCustomer = new Customers();

    public void ClosePopup()
    {
        ShowPopup = false;
    }

    public void OpenPopup()
    {
        ShowPopup = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await this.GetPage(0, 10);
    }

    public async Task SaveCustomer()
    {
        ClosePopup();
        Guid id = Guid.NewGuid();
        string customerId = id.ToString();
        addCustomer.CustomerId = customerId.Substring(customerId.Length - 4);
        string request = $"{baseUrl}api/customers";
        await httpClient.SendJsonAsync(HttpMethod.Post, request, addCustomer);
        addCustomer = new Customers();
        customers = await httpClient.GetJsonAsync<List<Customers>>($"{baseUrl}api/customers");
    }

    public async void Export()
    {
        var writer = new StringWriter();
        var csv = new CsvWriter(writer);

        csv.WriteRecords(customers);

        await csvService.SaveAsAsync("CustomersCsv.csv", Encoding.ASCII.GetBytes(writer.ToString()));
    }

    private bool IsSortedAscending;
    private string CurrentSortColumn;

    public void SortTable(string columnName)
    {
        if (columnName != CurrentSortColumn)
        {
            customers = customers.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            CurrentSortColumn = columnName;
            IsSortedAscending = true;
        }
        else
        {
            if (IsSortedAscending)
            {
                customers = customers.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                customers = customers.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            //Toggle this boolean
            IsSortedAscending = !IsSortedAscending;
        }
    }

    async void PrevPage()
    {
        this.GetPage(currentPage - 1);
    }

    async void NextPage()
    {
        this.GetPage(currentPage + 1);
    }

    private async Task GetPage(int page, int pageSize = 10)
    {
        var allCustomers = await httpClient.GetJsonAsync<List<Customers>>($"{baseUrl}api/customers");
        var cc = allCustomers;

        if(!string.IsNullOrWhiteSpace(this.FilterCompanyName))
            cc = cc.Where(x => x.CompanyName.StartsWith(this.FilterCompanyName)).ToList();

        if(!string.IsNullOrWhiteSpace(this.FilterByCountry))
            cc = cc.Where(x => x.Country.StartsWith(this.FilterByCountry)).ToList();

        if(!string.IsNullOrWhiteSpace(this.FilterByCity))
            cc = cc.Where(x => x.City.StartsWith(this.FilterByCity)).ToList();

        this.customers = cc.Skip(page * pageSize).Take(pageSize).ToList();

        this.totalPages = cc.Count / pageSize;
        this.currentPage = page;
    }

    private async Task OnFilterByCompanyChanged(string value)
    {
        this.FilterCompanyName = value;
        await this.GetPage(this.currentPage);
    }

    private async Task  OnFilterByCityChanged(string value)
    {
        this.FilterByCity = value;
        await this.GetPage(this.currentPage);
    }

    private async Task  OnFilterByCountryChanged(string value)
    {
        this.FilterByCountry = value;
        await this.GetPage(this.currentPage);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CsvService csvService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient httpClient { get; set; }
    }
}
#pragma warning restore 1591
